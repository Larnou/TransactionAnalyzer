from datetime import datetime
from unittest.mock import patch

import pandas as pd
import pytest


@pytest.fixture
def file_valid_data():
    return [
        {"Дата операции": "01.01.2023 00:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},
        {"Дата операции": "02.01.2023 12:30:45", "Дата платежа": "04.01.2023 ", "Сумма": 200},
        {"Дата операции": "04.01.2023 12:30:45", "Дата платежа": "09.01.2023 ", "Сумма": 200}
    ]

@pytest.fixture
def file_valid_one_line_data():
    return [
        {"Дата операции": "01.01.2023 00:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},
    ]

@pytest.fixture
def file_invalid_data():
    """Фикстура с невалидными данными"""
    return [
        {"Дата операции": "invalid_date", "Дата платежа": "invalid_date", "Сумма": "not_a_number"},
        {"Дата операции": "2023-13-01 25:61:61", "Дата платежа": "2023-13-01", "Сумма": None}
    ]


@pytest.fixture
def file_different_dates():
    return [
        {"Дата операции": "31.12.2023 23:59:59", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Последняя секунда года
        {"Дата операции": "01.01.2023 00:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Первая секунда года
        {"Дата операции": "29.02.2024 12:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Високосный год
        {"Дата операции": "31.12.9999 23:59:59", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Максимальная дата
        {"Дата операции": "30.02.2023 12:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100}  # Несуществующая дата
    ]

@pytest.fixture
def file_different_dates_formats():
    return [
        {"Дата операции": "01.01.2023 00:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Ожидаемый формат
        {"Дата операции": "2023-01-02 12:30:45", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # ISO формат
        {"Дата операции": "03/01/2023 15:45", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Формат с косой чертой
        {"Дата операции": "04 January 2023 18:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Текстовый месяц
        {"Дата операции": "invalid_date", "Дата платежа": "02.01.2023 ", "Сумма": 100}  # Невалидная дата
    ]

@pytest.fixture
def file_mixed_data(file_valid_data, file_invalid_data):
    """Фикстура со смесью валидных и невалидных данных"""
    return file_valid_data + file_invalid_data

# ==================================
# Фикстуры для проверки модуля ulils
# ==================================
@pytest.fixture
def sample_data():
    return [
        {"date": datetime(2023, 1, 1, 12, 0, 0), "value": 100},
        {"date": pd.Timestamp("2023-01-02 15:30:00"), "value": 200}
    ]

@pytest.fixture
def nested_data():
    return {
        "dates": [datetime(2023, 1, 3, 8, 0, 0)],
        "info": {
            "created_at": pd.Timestamp("2023-01-04 10:00:00"),
            "items": [
                {"time": datetime(2023, 1, 5, 12, 0, 0)}
            ]
        }
    }

@pytest.fixture
def empty_data():
    return []

