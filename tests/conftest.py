import math
from datetime import datetime
from unittest.mock import patch

import pandas as pd
import pytest
from pandas import DataFrame


@pytest.fixture
def file_valid_data():
    return [
        {"Дата операции": "01.01.2023 00:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},
        {"Дата операции": "02.01.2023 12:30:45", "Дата платежа": "04.01.2023 ", "Сумма": 200},
        {"Дата операции": "04.01.2023 12:30:45", "Дата платежа": "09.01.2023 ", "Сумма": 200}
    ]

@pytest.fixture
def file_valid_one_line_data():
    return [
        {"Дата операции": "01.01.2023 00:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},
    ]

@pytest.fixture
def file_invalid_data():
    """Фикстура с невалидными данными"""
    return [
        {"Дата операции": "invalid_date", "Дата платежа": "invalid_date", "Сумма": "not_a_number"},
        {"Дата операции": "2023-13-01 25:61:61", "Дата платежа": "2023-13-01", "Сумма": None}
    ]


@pytest.fixture
def file_different_dates():
    return [
        {"Дата операции": "31.12.2023 23:59:59", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Последняя секунда года
        {"Дата операции": "01.01.2023 00:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Первая секунда года
        {"Дата операции": "29.02.2024 12:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Високосный год
        {"Дата операции": "31.12.9999 23:59:59", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Максимальная дата
        {"Дата операции": "30.02.2023 12:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100}  # Несуществующая дата
    ]

@pytest.fixture
def file_different_dates_formats():
    return [
        {"Дата операции": "01.01.2023 00:00:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Ожидаемый формат
        {"Дата операции": "2023-01-02 12:30:45", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # ISO формат
        {"Дата операции": "03/01/2023 15:45", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Формат с косой чертой
        {"Дата операции": "04 January 2023 18:00", "Дата платежа": "02.01.2023 ", "Сумма": 100},  # Текстовый месяц
        {"Дата операции": "invalid_date", "Дата платежа": "02.01.2023 ", "Сумма": 100}  # Невалидная дата
    ]

@pytest.fixture
def file_mixed_data(file_valid_data, file_invalid_data):
    """Фикстура со смесью валидных и невалидных данных"""
    return file_valid_data + file_invalid_data

# ==================================
# Фикстуры для проверки модуля ulils
# ==================================
@pytest.fixture
def sample_data():
    return [
        {"date": datetime(2023, 1, 1, 12, 0, 0), "value": 100},
        {"date": pd.Timestamp("2023-01-02 15:30:00"), "value": 200}
    ]

@pytest.fixture
def nested_data():
    return {
        "dates": [datetime(2023, 1, 3, 8, 0, 0)],
        "info": {
            "created_at": pd.Timestamp("2023-01-04 10:00:00"),
            "items": [
                {"time": datetime(2023, 1, 5, 12, 0, 0)}
            ]
        }
    }

@pytest.fixture
def empty_data():
    return []


@pytest.fixture
def sample_transactions():
    return pd.DataFrame({
        "Дата операции": [
            datetime(2023, 5, 1, 0, 0, 0),   # Начало месяца
            datetime(2023, 5, 15, 12, 30, 0), # Середина месяца
            datetime(2023, 5, 20, 23, 59, 59),# Конечный день (граница)
            datetime(2023, 5, 21, 0, 0, 0),   # После периода
            datetime(2023, 4, 30, 23, 59, 59),# Предыдущий месяц
            datetime(2023, 6, 1, 0, 0, 0)     # Следующий месяц
        ],
        "Сумма": [100, 200, 300, 400, 500, 600],
        "Категория": ["A", "B", "C", "D", "E", "F"]
    })


@pytest.fixture
def sample_card_numbers():
    return [
        {"Номер карты": "1234567812345678", "Другое поле": "значение1"},
        {"Номер карты": "8765432187654321", "Другое поле": "значение2"},
        {"Номер карты": "1234567812345678", "Другое поле": "значение3"},  # Дубликат
    ]


@pytest.fixture
def sample_transactions_for_card_numbers():
    return [
        {"Номер карты": "1234567812345678", "Сумма": 100, "Описание": "Покупка 1"},
        {"Номер карты": "8765432187654321", "Сумма": 200, "Описание": "Покупка 2"},
        {"Номер карты": "1234567812345678", "Сумма": 300, "Описание": "Покупка 3"},
        {"Номер карты": None, "Сумма": 400, "Описание": "Покупка 4"},
        {"Номер карты": "0000000000000000", "Сумма": 500, "Описание": "Покупка 5"},
        {"Номер карты": math.nan, "Сумма": 600, "Описание": "Покупка 6"},
        {"Номер карты": "1234567812345678", "Сумма": 700, "Описание": "Покупка 7"},
    ]


@pytest.fixture
def sample_transactions_cashback():
    return [
        {"Сумма операции": -100.0, "Кэшбэк": 1.0},   # Стандартная трата
        {"Сумма операции": -200.50, "Кэшбэк": 2.0},  # Трата с дробью
        {"Сумма операции": 500.0, "Кэшбэк": 5.0},    # Положительная операция (не должна учитываться)
        {"Сумма операции": -0.01, "Кэшбэк": 0.0},    # Минимальная трата
        {"Сумма операции": -150.0},                  # Отсутствует кешбэк
    ]


@pytest.fixture
def sample_transactions_top_transactions():
    return [
        {"Сумма операции": -1000, "Дата платежа": datetime(2023, 5, 15), "Категория": "Еда", "Описание": "Ресторан"},
        {"Сумма операции": -500, "Дата платежа": datetime(2023, 5, 10), "Категория": "Транспорт", "Описание": "Такси"},
        {"Сумма операции": -1500, "Дата платежа": datetime(2023, 5, 5), "Категория": "Одежда", "Описание": "Магазин"},
        {"Сумма операции": -200, "Дата платежа": datetime(2023, 5, 20), "Категория": "Развлечения", "Описание": "Кино"},
        {"Сумма операции": -800, "Дата платежа": datetime(2023, 5, 1), "Категория": "Техника", "Описание": "Наушники"},
        {"Сумма операции": 300, "Дата платежа": datetime(2023, 5, 25), "Категория": "Возврат", "Описание": "Возврат товара"},
    ]


# Фикстура для мокирования requests.get
@pytest.fixture
def mock_requests_get():
    with patch('src.utils.requests.get') as mock_get:
        yield mock_get


# Фикстуры для мокирования
@pytest.fixture
def mock_load_dotenv():
    with patch('src.utils.load_dotenv') as mock:
        yield mock

@pytest.fixture
def mock_os_getenv():
    with patch('src.utils.os.getenv') as mock:
        yield mock

@pytest.fixture
def mock_get_usd_rate():
    with patch('src.utils.get_usd_rate') as mock:
        yield mock

@pytest.fixture
def sample_transaction_data():
    return DataFrame({
        'Дата операции': [
            '2023-05-01',
            '2023-05-15',
            '2023-05-31',
            '2023-04-30',
            '2023-06-01'
        ],
        'Сумма': [100, 200, 300, 400, 500],
        'Категория': ['A', 'B', 'C', 'D', 'E']
    })

@pytest.fixture
def sample_view_transaction_data():
    return pd.DataFrame({
        'Дата операции': [
            datetime.strptime('01.05.2023 16:44:00', "%d.%m.%Y %H:%M:%S"),
            datetime.strptime('15.05.2023 13:44:00', "%d.%m.%Y %H:%M:%S"),
        ],
        'Дата платежа': [
            datetime.strptime('01.05.2023', "%d.%m.%Y"),
            datetime.strptime('15.05.2023', "%d.%m.%Y"),
        ],
        'Сумма операции': [-1000, -500],
        'Категория': ['Еда', 'Транспорт'],
        'Номер карты': ['1234****5678', '8765****4321']
    })

@pytest.fixture
def sample_user_data():
    return {
        'user_currencies': ['USD', 'EUR'],
        'user_stocks': ['AAPL', 'GOOGL']
    }